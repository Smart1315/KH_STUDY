-- ORDER BY : 정렬 시 사용
-- SELECT 구문에 가장 마지막에 위치, 실행 순서도 가장 마지막에 실행
SELECT EMP_ID, EMP_NAME, SALARY 급여, DEPT_CODE
FROM EMPLOYEE
--ORDER BY EMP_NAME;
--ORDER BY EMP_NAME ASC;
--ORDER BY EMP_NAME DESC;
--ORDER BY DEPT_CODE NULLS FIRST; -- NULLS LAST 기본값
--ORDER BY 2;
ORDER BY 급여;

-- GROUP BY : 같은 값들이 여러 개 기록된 컬럼을 가지고 같은 값들을 하나의 그룹으로 묶음
SELECT DEPT_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE;

-- EMPLOYEE테이블에서 부서 코드 별 그룹을 지정하여
-- 부서 코드, 그룹별 급여 합계, 그룹별 급여 평균(정수처리), 인원수 조회하고 부서 코드 순으로 정렬
SELECT DEPT_CODE, SUM(SALARY), ROUND(AVG(SALARY)), COUNT(*)
FROM EMPLOYEE
GROUP BY DEPT_CODE
ORDER BY DEPT_CODE;

-- EMPLOYEE테이블에서 부서코드와 보너스 받는 사원 수 조회하고 부서코드 순으로 정렬
SELECT DEPT_CODE, COUNT(BONUS)
FROM EMPLOYEE
GROUP BY DEPT_CODE
ORDER BY DEPT_CODE;

-- EMPLOYEE테이블에서, 직급코드, 보너스를 받는 사원의 수를 조회하여 직급코드 순으로 오름차순 정렬
SELECT JOB_CODE, COUNT(BONUS)
FROM EMPLOYEE
WHERE BONUS IS NOT NULL
GROUP BY JOB_CODE
ORDER BY JOB_CODE;

-- EMPLOYEE테이블에서 성별과 성별 별 급여 평균(정수처리), 급여 합계, 인원수를 조회하고 인원수로 내림차순
SELECT DECODE(SUBSTR(EMP_NO, 8, 1), 1, '남', 2, '여') 성별, 
       ROUND(AVG(SALARY)) 평균, SUM(SALARY) 합계, COUNT(*) 인원수
FROM EMPLOYEE
GROUP BY DECODE(SUBSTR(EMP_NO, 8, 1), 1, '남', 2, '여')
ORDER BY 4 DESC;

-- EMPLOYEE테이블에서 부서 코드 별로 같은 직급인 사원의 급여 합계 조회(부서 코드 순으로 정렬)
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE, JOB_CODE
ORDER BY DEPT_CODE;

-- HAVINH : 그룹함수로 구해 올 그룹에 대해 조건 설정할 때 사용
-- 부서코드와 급여 3000000이상인 직원의 그룹별 평균 급여 조회
SELECT DEPT_CODE, ROUND(AVG(SALARY))
FROM EMPLOYEE
WHERE SALARY >= 3000000
GROUP BY DEPT_CODE;

-- 부서코드와 급여 평균이 3000000 이상인 그룹 조회
SELECT DEPT_CODE, ROUND(AVG(SALARY))
FROM EMPLOYEE
GROUP BY DEPT_CODE
HAVING AVG(SALARY) >= 3000000;

-- 부서별 그룹의 급여 합계 중 9백만원을 초과하는 부서코드와 급여 합계 조회(부서 코드 순으로 정렬)
SELECT DEPT_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE
HAVING SUM(SALARY) > 9000000
ORDER BY DEPT_CODE;

/*
    5 : SELECT 컬럼명 AS 별칭, 계산식, 함수식
    1 : FROM 참조할 테이블 명
    2 : WHERE 컬럼명 | 함수식 비교연산자 비교값
    3 : GROUP BY 그룹으로 묶을 컬럼명
    4 : HAVING 그룹 함수식 비교연산자 비교값
    6 : ORDER BY 컬럼명 | 별칭 | 컬럼순분 정령방식 [NULLS FIRST | LAST]
*/

-- 집계함수 : 그룹 별 산출한 결과의 집계를 계산하는 함수
SELECT JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(JOB_CODE);

-- ROLLUP
-- 그룹 중 가장 먼저 지정한 그룹별로 추가적 집계 결과 반환
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE, JOB_CODE)
ORDER BY DEPT_CODE;

-- CUBE : 그룹별 산출한 결과를 집계하는 함수
-- 그룹으로 지정된 모든 그룹에 대한 집계와 총 합계를 구함
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE, JOB_CODE)
ORDER BY DEPT_CODE;

-- 집합 연산자 : SET OPERATION
-- 여러가지 조건이 있을 때 그에 해당하는 여러 개의 결과 값을 결합하고자 할 때 사용
-- UNION : 합집합(OR)
-- INTERSECT : 교집합(AND)
-- UNION ALL : 합집합 + 교집합(OR결과에 AND 값이 더해짐)
-- MINUS : 차집합

-- UNION : 여러 개의 쿼리 결과를 하나로 합지는 연산자(중복된 영역을 제외하여 하나로 합침)
SELECT EMP_ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = 200
UNION
SELECT EMP_ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = 201;

SELECT EMP_ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = 200 OR EMP_ID = 201;

-- UNION을 사용하여 DEPT_CODE가 D5이거나 급여가 300만원을 초과하는 직원의 사번, 이름, 부서코드, 급여 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'
UNION
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE  SALARY > 3000000;

-- OR 사용
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5' OR SALARY > 3000000;

-- UNION ALL : 여러 개의 쿼리 결과를 하나로 합치는 연산자
-- UNION과의 차이점은 중복 영역을 모두 포함(합집합 + 교집합)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'
UNION ALL
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE  SALARY > 3000000;

-- INTERSECT : 여러 개의 SELECT한 결과에서 공통 부분만 결과로 추출(교집합)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'
INTERSECT
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE  SALARY > 3000000;

-- MINUS : 선행 SELECT결과에서 다음 SELECT결과와 겹치는 부분을 제외한 나머지 부분만 추출(차집합)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'
MINUS
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE  SALARY > 3000000;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID);

