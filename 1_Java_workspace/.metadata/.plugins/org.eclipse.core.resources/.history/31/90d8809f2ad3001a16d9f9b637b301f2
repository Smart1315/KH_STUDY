package com.kh.practice.set.controller;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.TreeSet;

import com.kh.practice.set.model.compare.SortedLottery;
import com.kh.practice.set.model.vo.Lottery;

public class LotteryController {
	private HashSet<Lottery> lottery = new HashSet<Lottery>();
	private HashSet<Lottery> win = new HashSet<Lottery>();

	public boolean insertObject(Lottery l) {
		return lottery.add(l);
	}

	public boolean deleteobject(Lottery l) {
		if (lottery.remove(l)) {
			if (win != null && win.contains(l)) {
				return win.remove(l);
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	public HashSet<Lottery> winObject() {
		if (!(lottery.size() > 4)) {
			return null;
		}

		ArrayList<Lottery> lList = new ArrayList<Lottery>(lottery);

		for (int i = 0; i < 4; i++) {
			int randomNum = (int) (Math.random() * (lList.size() - 1));
			if(!win.add(lList.get(randomNum))) {
				System.out.println(randomNum);
				i--;
			}
		}
		
		return win;
	}

	public TreeSet<Lottery> sortedWinObject() {
		TreeSet<Lottery> t = new TreeSet<Lottery>(new SortedLottery());
		t.addAll(win);
		
		return t;
	}

	public boolean searchWinner(Lottery l) {
		return win.contains(l);
	}
}
