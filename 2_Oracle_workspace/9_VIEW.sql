-- VIEW(뷰)
-- SELECT쿼리 실행 결과 화면을 저장한 객체
-- 논리적 가상 테이블
-- 실질적으로 데이터를 저장하고 있지 않음
-- 테이블을 사용하는 것과 동일하게 사용 가능

-- CREATE [OR REPLACE] VIEW 뷰 명 AS 서브 쿼리
-- OR REPLACE : 뷰 생성 시 기존에 같은 이름의 뷰가 있다면 해당 뷰 변경

-- 사번, 이름, 부서명, 근무 지역을 조회하고 그 결과를 V_EMPLOYEE라는 뷰를 생성하여 저장
CREATE OR REPLACE VIEW V_EMPLOYEE
AS
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, NATIONAL_NAME
FROM EMPLOYEE
     LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
     LEFT JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
     LEFT JOIN NATIONAL USING(NATIONAL_CODE);

GRANT CREATE VIEW TO KH; -- SYSTEM계정에서 실행

SELECT * FROM V_EMPLOYEE;

COMMIT;

SELECT *
FROM EMPLOYEE
WHERE EMP_ID = 205;

SELECT *
FROM V_EMPLOYEE
WHERE EMP_ID = 205;

UPDATE EMPLOYEE
SET EMP_NAME = '정중앙'
WHERE EMP_ID = 205;

SELECT *
FROM EMPLOYEE
WHERE EMP_ID = 205;

SELECT *
FROM V_EMPLOYEE
WHERE EMP_ID = 205;

ROLLBACK;

--------------------------------------------------------------------------------

-- 생성된 뷰 컬럼에 별칭 부여
-- 서브쿼리의 SELECT절에 함수가 사용된 경우 반드시 별칭 지정
-- 사번, 사원 명, 직급 명, 성별(남/여), 근무년수 조회
CREATE OR REPLACE VIEW V_EMP_JOB
AS
SELECT EMP_ID 사번, EMP_NAME 이름, JOB_NAME 직급, 
       DECODE(MOD(SUBSTR(EMP_NO, 8, 1), 2), 1, '남', '여') 성별, 
       EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM HIRE_DATE) 근무년수
FROM EMPLOYEE, JOB
WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

CREATE OR REPLACE VIEW V_EMP_JOB(사원번호, 사원이름, 직급이름, 남여, 근무연수)
AS
SELECT EMP_ID, EMP_NAME, JOB_NAME,
       DECODE(MOD(SUBSTR(EMP_NO, 8, 1), 2), 1, '남', '여'),
       EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM HIRE_DATE)
FROM EMPLOYEE, JOB
WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

SELECT * FROM V_EMP_JOB;

--------------------------------------------------------------------------------

CREATE OR REPLACE VIEW V_JOB
AS
SELECT JOB_CODE, JOB_NAME
FROM JOB;

SELECT * FROM JOB;
SELECT * FROM V_JOB;

INSERT INTO V_JOB VALUES('J8', '인턴');

SELECT * FROM JOB;
SELECT * FROM V_JOB;

UPDATE V_JOB
SET JOB_NAME = '알바'
WHERE JOB_CODE = 'J8';

SELECT * FROM JOB;
SELECT * FROM V_JOB;

DELETE FROM V_JOB
WHERE JOB_CODE = 'J8';

SELECT * FROM JOB;
SELECT * FROM V_JOB;

-- 뷰의 구조
SELECT * FROM USER_VIEWS;
-- USER_VIEWS : DD(Data Dicionary)의 한 종류로 사용자 정의 뷰 확인하고자 할 때

-- DML명령어로 조작이 불가능한 경우
-- 1. 뷰 정의에 포함되지 않은 컬럼을 조작하는 경우
CREATE OR REPLACE VIEW V_JOB2
AS
SELECT JOB_CODE
FROM JOB;

SELECT * FROM V_JOB2;

INSERT INTO V_JOB2 
VALUES('J8', '인턴');

UPDATE V_JOB2 
SET JOB_NAME = '인턴' 
WHERE JOB_CODE = 'J7';

DELETE FROM V_JOB2 
WHERE JOB_NAME = '사원';

-- 2. 뷰에 포함되지 않은 컬럼 중에 베이스가 되는 테이블 컬럼이 NOT NULL제약조건이 지정된 경우
CREATE OR REPLACE VIEW V_JOB3
AS
SELECT JOB_NAME
FROM JOB;

SELECT * FROM V_JOB3;

INSERT INTO V_JOB3
VALUES('인턴');

INSERT INTO JOB
VALUES('J8', '인턴');

SELECT * FROM V_JOB3;

UPDATE V_JOB3
SET JOB_NAME = '알바'
WHERE JOB_NAME = '인턴';

SELECT * FROM V_JOB3;

DELETE FROM V_JOB3
WHERE JOB_NAME = '알바';

SELECT * FROM V_JOB3;
SELECT * FROM JOB;

-- 3. 산술표현식으로 정의된 경우
-- 사번, 이름, 급여, 보너스가 포함된 연봉 데이터를 갖고 있는 EMP_SAL 뷰 생성
CREATE OR REPLACE VIEW EMP_SAL
AS
SELECT EMP_ID, EMP_NAME, SALARY, (SALARY + (SALARY * NVL(BONUS, 0))) * 12 "연봉"
FROM EMPLOYEE;

SELECT * FROM EMP_SAL;

INSERT INTO EMP_SAL
VALUES(800, '정진훈', 3000000, 36000000);

UPDATE EMP_SAL
SET 연봉 = 800000
WHERE EMP_ID = 200;

COMMIT;

SELECT *
FROM EMP_SAL
WHERE 연봉 = 124800000;

DELETE FROM EMP_SAL
WHERE 연봉 = 124800000;

ROLLBACK;

-- 4. 그룹함수나 GROUP BY절을 포함한 경우
-- 부서코드, 급여 합계, 급여 평균 데이터를 가지고 있는 V_GROUPDEPT 뷰 생성
CREATE OR REPLACE VIEW V_GROUPDEPT
AS
SELECT DEPT_CODE, SUM(SALARY) 급여합계, AVG(SALARY) 급여평균
FROM EMPLOYEE
GROUP BY DEPT_CODE;

SELECT * FROM V_GROUPDEPT;

INSERT INTO V_GROUPDEPT
VALUES('D10', 6000000, 4000000);

UPDATE V_GROUPDEPT
SET DEPT_CODE = 'D10'
WHERE DEPT_CODE = 'D1';

DELETE FROM V_GROUPDEPT
WHERE DEPT_CODE = 'D1';

-- 5. DISTINCT를 포함한 경우
CREATE OR REPLACE VIEW V_DT_EMP
AS
SELECT DISTINCT JOB_CODE
FROM EMPLOYEE;

SELECT * FROM V_DT_EMP;

INSERT INTO V_DT_EMP VALUES('J9');

UPDATE V_DT_EMP
SET JOB_CODE = 'J9'
WHERE JOB_CODE = 'J7';

DELETE FROM V_DT_EMP
WHERE JOB_CODE = 'J1';

-- 6. JOIN을 이용해 여러 테이블을 연결한 경우
CREATE OR REPLACE VIEW V_JOINEMP
AS
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
     JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
     
SELECT * FROM V_JOINEMP;

INSERT INTO V_JOINEMP VALUES (888, '조세오', '인사관리부');

UPDATE V_JOINEMP
SET DEPT_TITLE = '인사관리부'
WHERE EMP_ID = 219;

COMMIT;

DELETE FROM V_JOINEMP
WHERE EMP_ID = 219;

SELECT * FROM V_JOINEMP;
SELECT * FROM EMPLOYEE;
SELECT * FROM DEPARTMENT;

ROLLBACK;

-- VIEW 옵션
-- 1. OR REPLACE : 동일한 뷰 이름이 존재하면 덮어쓰고, 존재하지 않으면 새로 생성
-- 2. FORCE / NOFORCE
--      FORCE : 서브쿼리에 사용된 테이블이 존재하지 않아도 뷰 생성
--      NOFORCE : 서브쿼리에 사용된 테이블이 존재해야만 뷰 생성(기본 값)
-- 3. WITH CHECK OPTION : 옵션을 설정한 컬럼의 값을 수정 불가능 하게 함
-- 4. WITH READ ONLY : 뷰를 조회만 가능(DML 수행 불가)

-- 1. OR REPLACE : 동일한 뷰 이름이 존재하면 덮어쓰고, 존재하지 않으면 새로 생성
CREATE OR REPLACE VIEW V_EMP1
AS 
SELECT EMP_NO, EMP_NAME
FROM EMPLOYEE;

SELECT * FROM V_EMP1;

CREATE OR REPLACE VIEW V_EMP1
AS
SELECT EMP_NO, EMP_NAME, SALARY
FROM EMPLOYEE;

SELECT * FROM V_EMP1;

CREATE VIEW V_EMP1
AS
SELECT EMP_NAME, SALARY
FROM EMPLOYEE;

-- 2. FORCE / NOFORCE
--      FORCE : 서브쿼리에 사용된 테이블이 존재하지 않아도 뷰 생성
--      NOFORCE : 서브쿼리에 사용된 테이블이 존재해야만 뷰 생성(기본 값)
CREATE OR REPLACE FORCE VIEW V_EMP2
AS
SELECT TCODE, TNAME, TCONTENT
FROM TT;

SELECT * FROM V_EMP2; -- ERROR
SELECT * FROM USER_VIEWS;

CREATE OR REPLACE /*NOFORCE*/ VIEW V_EMP2
AS
SELECT TCODE, TNAME, TCONTENT
FROM TT;

-- 3. WITH CHECK OPTION : 옵션을 설정한 컬럼의 값을 수정 불가능 하게 함
CREATE OR REPLACE VIEW V_EMP3
AS
SELECT *
FROM EMPLOYEE
WHERE DEPT_CODE = 'D9'
WITH CHECK OPTION;

SELECT * FROM V_EMP3;

UPDATE V_EMP3
SET DEPT_CODE = 'D1'
WHERE EMP_ID = 200;

UPDATE V_EMP3
SET EMP_NAME = '박신우'
WHERE EMP_ID = 200;

SELECT * FROM V_EMP3;

ROLLBACK;

-- 4. WITH READ ONLY : 뷰를 조회만 가능(DML 수행 불가)
CREATE OR REPLACE VIEW V_DEPT
AS
SELECT * FROM DEPARTMENT
WITH READ ONLY;

SELECT * FROM V_DEPT;

DELETE FROM V_DEPT;